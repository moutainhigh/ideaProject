/**
 * Copyright: 互融云
 *
 * @author: yaoz
 * @version: V1.0
 * @Date: 2020-04-26 15:12:26 
 */
package hry.controller.auth;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import hry.bean.JsonResult;
import hry.business.cu.model.CuCustomer;
import hry.business.cu.service.CuCustomerService;
import hry.core.mvc.controller.BaseController;
import hry.platform.newuser.model.NewAppUser;
import hry.redis.RedisService;
import hry.security.jwt.JWTContext;
import hry.security.jwt.JWTToken;
import hry.security.jwt.JWTUtil;
import hry.security.jwt.LoginService;
import hry.security.jwt.annotation.UnAuthentication;
import hry.util.PasswordHelper;
import hry.util.SpringUtil;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.security.auth.Subject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * 功能描述: 登录认证类
 * @auther: yaozh
 * @date: 2020/4/27 16:44
 */
@Api(value = "登录认证类", tags = "登录认证类", description = "登录认证类")
@RestController
@RequestMapping("/auth")
public class AuthController extends BaseController {

	@Autowired
	private CuCustomerService cuCustomerService;
    @Autowired
    private RedisService redisService;

    @ApiOperation(value = "登录方法", notes = "登录方法")
    @PostMapping("/login")
    @UnAuthentication
    public JsonResult login(
            @ApiParam(name = "loginCode", value = "图形验证码", required = true) @RequestParam(value = "loginCode", required = false) String loginCode,
            @ApiParam(name = "userName", value = "用户名", required = true) @RequestParam String userName,
            @ApiParam(name = "passWord", value = "密码", required = true) @RequestParam String passWord,
            HttpServletRequest request, HttpServletResponse response) {
        JsonResult jsonResult = new JsonResult();
        // 用户名不能为空
        if (StringUtils.isEmpty(userName)) {
            jsonResult.setMsg("用户名不能为空");
            return jsonResult;
        }
        // 用户名不能为空
        if (StringUtils.isEmpty(passWord)) {
            jsonResult.setMsg("密码不能为空");
            return jsonResult;
        }
        //图形验证码
        if(StringUtils.isEmpty(loginCode)){
            jsonResult.setMsg("图形验证码不能为空");
            return jsonResult;
        }else{
            Integer loginCode1 = (Integer)request.getSession().getAttribute("loginCode");
            if(loginCode1==null||!loginCode.equals(loginCode1.toString())){
                jsonResult.setMsg("图形验证码错误");
                return jsonResult;
            }
        }
        //验证用户是否存在
        CuCustomer cuCustomer = cuCustomerService.checkUsername(userName);
        if (cuCustomer == null) {
            return new JsonResult().setMsg("用户名/密码错误");
        }

        //判断密码是否正确
        if(!PasswordHelper.validatePassword(cuCustomer.getPassword(),passWord,cuCustomer.getSalt())){
            return new JsonResult().setMsg("用户名/密码错误");
        }

        //判断用户是否被禁用
        if(cuCustomer.getStatus()==0){
            return new JsonResult().setMsg("用户被禁用");
        }

        //生成签名
        String token = JWTUtil.sign(userName, JWTToken.SOURCE_PC,JWTToken.TYPE_CUSTOMER,cuCustomer.getPassword());

        // 将token存储到redis中作为刷新token的凭证，并设置key的过期时间作为刷新有效期
        redisService.save(JWTUtil.getCustomerRefreshTimeKey(token),JSON.toJSONString(cuCustomer), JWTUtil.REFRESH_TIME);
        redisService.save(JWTUtil.getCustomerUserKey(token), JSON.toJSONString(cuCustomer),JWTUtil.EXPIRE_TIME);
        //JWTContext.setLogin(token);
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("token", token);

        return new JsonResult().setSuccess(true).setObj(jsonObject);

    }

}
