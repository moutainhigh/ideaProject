/**
 * Copyright: 互融云
 *
 * @author: yaoz
 * @version: V1.0
 * @Date: 2020-06-16 16:17:44
 */
package hry.business.cf.service.impl;

import com.github.pagehelper.Page;
import hry.bean.PageResult;
import hry.business.cf.dao.CfFacilityFlowDao;
import hry.business.cf.model.CfFacilityFlow;
import hry.business.cf.service.CfFacilityFlowService;
import hry.core.mvc.dao.BaseDao;
import hry.core.mvc.service.impl.BaseServiceImpl;
import hry.core.util.PageFactory;
import hry.core.util.QueryFilter;
import hry.platform.flow.service.CommonFlowService;
import hry.util.flowModel.FlowParams;
import hry.util.flowModel.FlowResult;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.Map;

/**
 * <p> CfFacilityFlowService </p>
 *
 * @author: yaoz
 * @Date: 2020-06-16 16:17:44
 */
@Service("cfFacilityFlowService")
public class CfFacilityFlowServiceImpl extends BaseServiceImpl<CfFacilityFlow, Long> implements CfFacilityFlowService, CommonFlowService {

	@Resource(name = "cfFacilityFlowDao")
	@Override
	public void setDao (BaseDao<CfFacilityFlow, Long> dao) {
		super.dao = dao;
	}

	@Override
	public PageResult findPageBySql(QueryFilter filter) {
		// ----------------------分页查询头部外壳------------------------------
		Page<CfFacilityFlow> page = PageFactory.getPage(filter);

		String facilityCode = filter.getRequest().getParameter("facilityCode");
		String sellEnterpriseName = filter.getRequest().getParameter("sellEnterpriseName");
		String coreEnterpriseName = filter.getRequest().getParameter("coreEnterpriseName");
		String facilityType = filter.getRequest().getParameter("facilityType");

		Map<String, Object> map = new HashMap<String, Object>();
		if (!StringUtils.isEmpty(facilityType)) {
			map.put("facilityType", facilityType);
		}
		if (!StringUtils.isEmpty(facilityCode)) {
			map.put("facilityCode", "%" + facilityCode + "%");
		}
		if (!StringUtils.isEmpty(sellEnterpriseName)) {
			map.put("sellEnterpriseName", "%" + sellEnterpriseName + "%");
		}
		if (!StringUtils.isEmpty(coreEnterpriseName)) {
			map.put("coreEnterpriseName", "%" + coreEnterpriseName + "%");
		}
		((CfFacilityFlowDao) dao).findPageBySql(map);
		return new PageResult(page, filter.getPage(), filter.getPageSize());
	}

	@Override
	public FlowResult jzdc(FlowParams flowParams) {
		FlowResult flowResult = new FlowResult();
		flowResult.setSuccess(true);
		System.out.println("授信流程---尽职调查");
		return flowResult;
	}

	@Override
	public FlowResult fxsh(FlowParams flowParams) {
		FlowResult flowResult = new FlowResult();
		flowResult.setSuccess(true);
		System.out.println("授信流程---风险审核");
		return flowResult;
	}

	@Override
	public FlowResult zzht(FlowParams flowParams) {
		return null;
	}

	@Override
	public FlowResult xmgd(FlowParams flowParams) {
		return null;
	}


	@Override
	public FlowResult start(FlowParams flowParams) {
		FlowResult flowResult = new FlowResult();
		flowResult.setSuccess(true);
		System.out.println("授信流程启动了");

		//创建流程项目
		CfFacilityFlow cfFacilityFlow = new CfFacilityFlow();
		cfFacilityFlow.setProjectName("1");
		save(cfFacilityFlow);


		Map<String,Object> map = new HashMap<>();
		map.put("projectId",cfFacilityFlow.getId());
		flowResult.setParams(map);

		return flowResult;
	}
}
