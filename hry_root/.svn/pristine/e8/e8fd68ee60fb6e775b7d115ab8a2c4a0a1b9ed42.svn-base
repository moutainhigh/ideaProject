/**
 * Copyright: 互融云
 *
 * @author: yaoz
 * @version: V1.0
 * @Date: 2020-07-17 17:01:01
 */
package hry.business.fa.service.impl;

import hry.bean.JsonResult;
import hry.business.cu.model.CuEnterprise;
import hry.business.cu.model.CuPerson;
import hry.business.cu.service.CuBankService;
import hry.business.cu.service.CuEnterprisePersonService;
import hry.business.cu.service.CuEnterpriseService;
import hry.business.fa.model.FaFactoringContract;
import hry.business.fa.model.FaFactoringCost;
import hry.business.fa.model.FaFactoringFlow;
import hry.business.fa.model.FaFactoringRate;
import hry.business.fa.service.*;
import hry.core.mvc.dao.BaseDao;
import hry.core.mvc.service.impl.BaseServiceImpl;
import hry.core.thread.ThreadPoolUtils;
import hry.core.util.QueryFilter;
import hry.platform.flow.service.CommonFlowService;
import hry.platform.newuser.model.NewAppUser;
import hry.platform.newuser.service.NewAppUserService;
import hry.util.date.DateUtil;
import hry.util.flowModel.FlowParams;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import javax.annotation.Resource;
import java.util.Date;
import java.util.concurrent.CountDownLatch;

/**
 * <p> FaFactoringFlowService </p>
 *
 * @author: yaoz
 * @Date: 2020-07-17 17:01:01
 */
@Service("faFactoringFlowService")
public class FaFactoringFlowServiceImpl extends BaseServiceImpl<FaFactoringFlow, Long> implements FaFactoringFlowService, CommonFlowService {

	@Resource(name = "faFactoringFlowDao")
	@Override
	public void setDao (BaseDao<FaFactoringFlow, Long> dao) {
		super.dao = dao;
	}

	@Autowired
	private CuEnterpriseService cuEnterpriseService;
	@Autowired
	private FaFactoringCostService faFactoringCostService;
	@Autowired
	private FaFactoringRateService faFactoringRateService;
	@Autowired
	private FaBillService faBillService;
	@Autowired
	private CuBankService cuBankService;
	@Autowired
	private FaFactoringContractService faFactoringContractService;
	@Autowired
	private CuEnterprisePersonService cuEnterprisePersonService;
	@Autowired
	private FaProductService faProductService;
	@Autowired
	private NewAppUserService newAppUserService;

	@Override
	public JsonResult getFaFactoringFlowInfo(Long id) {
		JsonResult jsonResult = new JsonResult();
		FaFactoringFlow faFactoringFlow = get(id);
		if (faFactoringFlow==null) return jsonResult.setMsg("为查询s到信息！");
		CountDownLatch latch = new CountDownLatch(8);

		//1查询卖方企业
		ThreadPoolUtils.execute(() -> {
			if (!StringUtils.isEmpty(faFactoringFlow.getSellEnterpriseId())){
				CuEnterprise cuEnterprise = cuEnterpriseService.get(faFactoringFlow.getSellEnterpriseId());
				//联系人
				CuPerson lianxiren = cuEnterprisePersonService.getCuEnterprisePersonByEnterpriseIdAndType(faFactoringFlow.getSellEnterpriseId(), 3);
				cuEnterprise.setContacts(lianxiren);
				faFactoringFlow.setSellEnterprise(cuEnterprise);
			}
			latch.countDown();
		});

		//2查询买方企业
		ThreadPoolUtils.execute(() -> {
			if (!StringUtils.isEmpty(faFactoringFlow.getBuyEnterpriseId())){
				faFactoringFlow.setBuyEnterprise(cuEnterpriseService.get(faFactoringFlow.getBuyEnterpriseId()));
			}
			latch.countDown();
		});

		//3查询费用明细
		ThreadPoolUtils.execute(() -> {
			QueryFilter queryFilter = new QueryFilter(FaFactoringCost.class);
			queryFilter.addFilter("factoringId=",faFactoringFlow.getId());
			faFactoringFlow.setCostList(faFactoringCostService.find(queryFilter));
			latch.countDown();
		});

		//4查询费率明细
		ThreadPoolUtils.execute(() -> {
			QueryFilter queryFilter = new QueryFilter(FaFactoringRate.class);
			queryFilter.addFilter("factoringId=",faFactoringFlow.getId());
			faFactoringFlow.setRateList(faFactoringRateService.find(queryFilter));
			latch.countDown();
		});

		//5查询票据信息
		ThreadPoolUtils.execute(() -> {
			faFactoringFlow.setFaBillList(faBillService.findBillByFactoringId(faFactoringFlow.getId()));
			latch.countDown();
		});

		//6查询银行信息
		ThreadPoolUtils.execute(() -> {
			if(!StringUtils.isEmpty(faFactoringFlow.getBankId())){
				faFactoringFlow.setCuBank(cuBankService.get(faFactoringFlow.getBankId()));
			}
			latch.countDown();
		});

		//7查询合同签署信息
		ThreadPoolUtils.execute(() -> {
			QueryFilter filter = new QueryFilter(FaFactoringContract.class);
			filter.addFilter("factoringId=",faFactoringFlow.getId());
			faFactoringFlow.setContractList(faFactoringContractService.find(filter));
			latch.countDown();
		});

		//8查询产品信息
		ThreadPoolUtils.execute(() -> {
			faFactoringFlow.setFaProduct(faProductService.get(faFactoringFlow.getProductId()));
			latch.countDown();
		});

		try {
			latch.await();
			return jsonResult.setSuccess(true).setObj(faFactoringFlow);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}

	@Override
	public FlowParams start(FlowParams flowParams) {
		//卖方企业id
		Long enterpriseId = flowParams.getAttributeLong("sellCustomerId");
		//项目经理id
		Long projectManagerId = flowParams.getAttributeLong("projectManagerId");
		//产品ID
		Long productId = flowParams.getAttributeLong("productId");

		//企业对象
		CuEnterprise cuEnterprise = cuEnterpriseService.get(Long.valueOf(enterpriseId));
		if (cuEnterprise == null) {
			flowParams.setSuccess(false).setMsg("sellCustomerId错误");
			return flowParams;
		}

		//项目经理
		NewAppUser projectManager = newAppUserService.get(projectManagerId);

		//创建流程项目
		FaFactoringFlow project = new FaFactoringFlow();
		//项目名称
		String projectName = cuEnterprise.getName() + DateUtil.dateToString(new Date(), "yyyyMMdd");
		//授信编号
		String projectCode = DateUtil.dateToString(new Date(), "yyyyMMdd");
		project.setProjectName(projectName);
		project.setProjectCode(projectCode);
		project.setProjectManagerId(projectManagerId);
		project.setProjectManagerName(projectManager.getUserName());
		//卖方企业ID
		project.setSellEnterpriseId(enterpriseId);
		project.setSellEnterpriseName(cuEnterprise.getName());

		save(project);

		//设置流水号--更新流程
		String number = String.format("%4d", project.getId()).replace(" ", "0");
		//流程名称
		project.setProjectName(project.getProjectName() + number);
		project.setProjectCode(project.getProjectCode() + number);
		update(project);


		//流程参数
		flowParams.setProjectId(project.getId());
		flowParams.setProjectName(project.getProjectName());
		flowParams.setSuccess(true);

		return flowParams;
	}

	@Override
	public FlowParams view(FlowParams flowParams) {
		return null;
	}
}
